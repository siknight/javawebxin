1.编程题
  使用三种方式完成文件的拷贝。

作业：
--------------------------------------------------------------------------------
今天内容：
   (1)I/O流
   (2)线程的概念和操作
   (3)线程的同步机制
   (4)网络编程的基本常识

1.I/O流
1.1 ObjectOutputStream类(重点)
(1)基本概念
   java.io.ObjectOutputStream类主要用于将整个对象一次性写入到输出流中。
   只能将支持 java.io.Serializable 接口的对象写入流中。   
   类通过实现 java.io.Serializable 接口以启用其序列化(将对象的相关信息转换为字节流序列的过程)功能。

(2)常用的方法
   ObjectOutputStream(OutputStream out) - 根据参数指定的引用来构造对象。
      - 其中参数为抽象类，因此实参需要传递子类的对象。
   void writeObject(Object obj) - 用于将参数指定的对象写入到输出流中。
   void close()

1.2 ObjectInputStream类(重点)
(1)基本概念
   java.io.ObjectInputStream类主要用于将之前ObjectOutputStream类写入的对象进行反序列化操作，也就是读取整个对象。   

(2)常用的方法
   ObjectInputStream(InputStream in) - 根据参数指定的引用构造对象。
       - 其中参数为抽象类，实参需要传递子类的对象。
   Object readObject() - 用于从输入流中读取一个对象并返回。
       - 该方法是无法通过返回值来判断是否读取到文件末尾的。
   void close() 

经验：
   当需要向文件中写入多个对象时，通常情况下建议将多个对象信息放入一个集合中，然后把集合这个整体看做是一个对象写入文件中，那么读取文件中的内容时只需要一次性将整个集合中信息全部读取出来即可。

2.线程的概念和操作
2.1 基本概念
  程序 - 就是指存放在硬盘上的可执行文件。
  进程 - 就是指在内存空间中运行的程序。

  目前主流的操作系统都支持多进程，为了使得多个任务同时执行，但进程是重量级的，新建进程对系统的资源消耗比较大，因此进程的数量还是有限的。
  线程是进程内部的程序流，也就是说操作系统支持多进程，而在每个进程的内部可以支持多线程，并且线程是轻量级的，新建线程会共享所在进程的资源，因此资源消耗比较小。
  以后的主流开发都采用多线程。
  目前主流的操作系统都采用时间片轮转法来实现多线程的并发，所谓的并发就是指宏观并行，微观串行的机制。

2.2 线程的创建(重点)
(1)线程创建的方式
   java.lang.Thread类是用于描述线程对象的，允许应用程序启动多个线程，具体方式如下：
       a.自定义类继承Thread类，重写run()方法，调用start()方法启动线程。
       b.自定义类实现Runnable接口并重写run()方法，调用start()方法启动线程。   

(2)线程创建的相关方法
   Thread() - 使用无参的形式构造对象。
   Thread(String name) - 使用参数指定的名称来构造对象。
   Thread(Runnable target) - 使用参数指定的接口引用来构造对象。
       - 形参是接口类型的引用，实参需要传递实现类的对象或者匿名内部类。
   Thread(Runnable target, String name) - 根据接口引用和名称共同构造对象。

   void run() - 当使用Runnale接口构造线程对象时，最终调用接口中的run()方法。
              - 当使用Thread类构造线程对象时，该方法啥也不干。
   void start() - 用于启动线程，并自动调用该线程的run()方法。

(3)多线程的原理分析
   执行main()方法的线程叫做 主线程，使用start()方法启动的线程叫做子线程/新线程。
   首先main()方法是程序的入口，对于start()方法之前的代码由主线程执行一次，当start()方法调用成功之后，线程个数由1个变成了2个，其中新创建的子线程直接去执行run()方法，而执行main()方法的主线程继续向下执行，于是两个线程同时执行。
   当run()方法执行完毕时，子线程结束；当main()方法结束时，主线程结束。
   主线程和子线程没有明确的执行先后次序，取决于操作系统的调度算法。

经验：
   对于创建线程的两种方式来说，继承的方式代码量相对简单，但java语言中只支持单继承，
因此一旦使用继承的方式，则该类就不能继承其他类；实现接口的方式代码量相对复杂，但不影响该类继承其他类，而且支持多实现，因此通常情况下推荐使用第二种方式。

2.3 线程的名称和编号(熟悉)
    static Thread currentThread() - 用于获取当前正在执行的线程对象的引用。
    long getId() - 用于返回线程的标识符/编号。
    String getName() - 用于返回线程的名称。
    void setName(String name) - 用于设置/修改线程的名称。

2.4 线程的主要状态(尽量理解)
    新建状态 - 当线程对象使用new关键字创建出来的状态。
             - 此时线程并没有开始执行。
    就绪状态 - 当线程对象调用start()方法之后进入的状态。
             - 此时线程还是没有开始执行。
    运行状态 - 当线程调度器调度该线程之后进入的状态。
             - 此时线程开始执行自己的时间片。
             - 当时间片执行完毕但任务没有完成时进入就绪状态。
    消亡状态 - 当线程执行完毕自己的时间片并完成自己的任务时进入的状态。
             - 此时该线程已经结束了。
    阻塞状态 - 当线程执行过程中遇到阻塞事件时进入的状态，如：调用sleep()方法.
             - 当阻塞状态解除之后进入就绪状态。 

2.5 Thread类中的常用方法
   static void yield() - 用于让出CPU的执行权，让当前线程由运行状态回到就绪状态。
   static void sleep(long millis) - 用于让当前正在执行的线程进入休眠状态。
       - 休眠参数指定的毫秒数，1秒 = 1000毫秒。 1秒 = 10^9纳秒
   void interrupt() - 用于中断线程，通常用于打断线程的睡眠状态。
   void join() - 用于等待调用对象的线程终止。
   void join(long millis) - 用于等待参数指定的毫秒。

要求重点掌握的方法：
   sleep()方法 和 join()方法。 
 
作业：
   1.使用继承的方式启动一个子线程，在子线程中打印每隔1秒打印一句话“纸上谈来
         终觉浅，绝知此事要躬行！”，总共打印10次。
     要求主线程先等待子线程终止并打印“你总算结束了”，再让主线程等待5秒后
         打印“等不住你了，再见！”。
   2.要求在学生信息管理系统中增加两个功能：
      a.要求启动该项目时，先读取文件中的所有学生信息。
      b.要求退出该项目时，将所有的学生信息写入到文件中。   
  
 
      
  
 
    
 


 
  
 
 


  
    

















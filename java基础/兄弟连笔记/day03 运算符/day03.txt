1.简答题
  简述单个字节表示的整数范围并写出推导过程。

2.编程题
  提示用户从键盘输入姓名和年龄，并打印出来。

作业：
  1.
  2.分析
    1g => 1g
    2g => 1g 1g       => 1 ~ 2g
       => 1g 2g       => 1 ~ 3g

    4g => 1g 2g 1g    => 1 ~ 4g
       => 1g 2g 2g    => 1 ~ 5g
       => 1g 2g 3g    => 1 ~ 6g
       => 1g 2g 4g    => 1 ~ 7g

    8g => 1g 2g 4g 8g => 1 ~ 15g
    16g=> ...

    总结：要称量1 ~ 100g之间的重量至少7个砝码，分别为：1g 2g 4g 8g 16g 32g 64g
   
  3.
----------------------------------------------------------------------------
今天内容：
   (1)数据类型之间的转换
   (2)运算符
   (3)分支结构
   (4)循环结构

1.数据类型之间的转换(熟悉)
  在java语言中数据类型之间的转换主要有两种形式：自动类型转换 和 强制类型转换。
  自动类型转换 - 通常情况下在编译阶段自动完成，指从小类型到大类型之间的转换。
  强制类型转换 - 通常情况下需要手动进行转换，指从大类型到小类型之间的转换。
               - 强制类型转换的语法格式：
                     目标类型 变量名 = (目标类型)源类型变量名;
               - 切记以后的编程中尽量少使用强制类型转换，可能造成数据的丢失。

  自动类型转换的形式有：
      byte => short => int => long => float => double
              char  => 
  boolean类型不参与任何形式的类型转换。

扩展：
  有余力的同学课下可以查询float类型的底层结构。

2.常用的运算符(重点)
2.1 算数运算符
   + 表示加法运算符      -  表示减法运算符
   * 表示乘法运算符      /  表示除法运算符
   % 表示取模/取余运算符

注意事项：
   (1)两个整数相除时，商取整数部分，丢弃小数部分，如：5/2 = 2。
   (2)若希望商不会丢弃小数部分，则可以将其中一个操作数强转为double类型或乘以         1.0变成double类型，推荐使用乘以1.0的方式。
   (3)0不能做除数，否则编译通过，但在运行阶段产生算数异常的错误信息。    
   (4)0.0可以做除数，但运行的结果是无穷大，因此不要使用0和0.0做除数。

2.2 关系/比较运算符
   > 表示是否大于运算符         >=  表示是否大于等于
   < 表示是否小于运算符         <=  表示是否小于等于
   == 表示是否等于运算符        !=  表示是否不等于运算符

   所有关系/比较运算符最终的结果都是boolean类型的，也就只能是true 和 false。

笔试题：
   ia == 2;   判断ia是否等于2
   2  == ia;  判断2是否等于ia
   ia = 2;    将2赋值给变量ia，也就是放入ia的内存空间
   2  = ia;   error 编译报错

练习：
   提示用户输入一个整数，判断用于输入的整数是否为非负数并打印。

2.3 自增减运算符
   + 表示加法运算符    ++ 表示自增运算符，通常用于使得变量自己的数值加一。
   - 表示减法运算符    -- 表示自减运算符，通常用于使得变量自己的数值减一。

   ++运算符放在变量的前面，表示先进行++再进行其他运算。
   ++运算符放在变量的后面，表示先进行其他运算再进行++，--同理。

经验：
   在以后的开发中尽量不要使用++/--与其他的运算符一起使用，建议单独使用，也不要在同一个表达式中多次修改同一个变量的数值。
   如： ia++;  =>  ++ia; => ia = ia+1;
        --ia;  =>  ia--; => ia = ia-1; 

2.4 逻辑运算符
   && - 表示逻辑与运算符，相当于并且，该运算符两侧操作数都是boolean类型表达式
      - 同真为真，一假为假。
   || - 表示逻辑或运算符，相当于或者，该运算符两侧操作数都是boolean类型表达式
      - 一真为真，同假为假。
   ！ - 表示逻辑非运算符，相当于取反，真为假，假为真。
   
短路特性：
   对于逻辑与来说，当第一个条件为假时，则整个表达式结果为假，第二个条件不判断;
   对于逻辑或来说，当第一个条件为真时，则整个表达式结果为真，第二个条件不判断;

2.5 条件/三目运算符
   条件表达式？表达式1:表达式2
      => 当条件表达式成立时，则执行表达式1;
      => 当条件表达式不成立时，则执行表达式2;

练习：
   判断用户输入的整数是偶数还是奇数。
      
2.6 赋值运算符
(1)简单赋值
    =  表示赋值运算符，用于将=右侧的数据赋值给=左侧的变量。
    如：  
        ia = 5;
        a = b = c = 10;
(2)复合赋值
   +=、-=、*=、/= ... ...
   如：
       ia = ia + 5;     =>  ia = 10; 推荐使用该方式，可读性更好
       ia += 5;         =>  从结果上来说，与上述代码是等价的。            

笔试题：
   byte ia = ia + 5;  与  ia += 5 之间有和区别？
解析：
   ia = ia + 5;  - 编译报错，因此需要进行强制类型转换。   
   ia += 5;      - 编译通过，真正等价的是：ia = (byte)(ia + 5)。

2.7 字符串连接符
   + 表示字符串连接符
   当+两边的操作数都不是字符串时，则按照算数运算符的规则进行运算。
   当+两边的操作数只要有一个是字符串时，则按照字符串连接符的规则进行运算。

2.8 移位运算符(了解)
   << 表示左移运算符，也就是说将二进制位向左移动，右边填0的方式。
   >> 表示右移运算符，也就是说将二进制位向右移动，左边填符号位的方式。
   >>> 表示逻辑右移运算符，也就是说将二进制位向右移动，左边填0的方式。

2.9 位运算符(了解)
   & 表示按位与运算符，相当于并且，同1为1，一0为0.(1看做真，0看做假)
   | 表示按位或运算符，相当于或者，同0为0，一1为1.
   ^ 表示按位异或运算符，相同为0，不同为1.
   ~ 表示按位取反运算符，1为0，0为1.

2.10 运算符的优先级
   (1)()运算符的优先级极高。
   (2) =运算符的优先级极低。
   (3)*、/、%同级别，+ -同级别，* / % 高于 + -。        
  
作业：
   1.复习和总结所学内容，要求重点代码至少敲3遍。
   2.提示用户输入一个三位数的整数，然后进行逆序处理再打印。
   如：
       123 => 321  打印   
   3.使用三目运算符判断用户输入的数据是正数、负数还是0。


   















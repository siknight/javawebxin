1.画图题
  画出Collection和Map的两张框架图。

2.编程题
  假定已有Student类，实现向List集合中放入3个Student类型的对象，并使用两种方式打印所有元素，最终清空整个集合的所有元素。

作业：
---------------------------------------------------------------------------------
今天内容：
   (1)Set集合
   (2)Map集合
   (3)异常
   (4)File类
   (5)I/O流

1.Set集合(重点)
1.1 基本概念
  java.util.Set接口是Collection接口的子接口，与List接口是平级的关系。
  该接口与List接口不同之处在于：没有放入先后次序，也不允许重复。
  该接口的主要实现类有：HashSet类 和 TreeSet类。
  其中HashSet类的底层是采用哈希表进行数据的管理。
  其中TreeSet类的底层是采用二叉树进行数据的管理。

1.2 常用的方法
  该集合的常用方法参考Collection集合即可。
  Iterator<E> iterator() - 用于获取当前集合中的迭代(遍历)器，用于遍历集合中所有元素
      boolean hasNext() - 用于判断是否有可以遍历的元素，若有则返回true。
      E next()  - 用于返回遍历的下一个元素，也就是说取出元素后指向下一个元素。
      void remove() - 用于从集合中删除最后一次遍历的元素。

注意：
   当使用迭代器遍历集合中的元素时，不允许使用集合中的remove()方法去删除元素，避免并发修改异常的发生，推荐使用迭代器自己的remove()方法去删除。

1.3 增强版的for循环(for each)
(1)基本概念
   从jdk1.5开始提出for each的机制，该机制本质上就是迭代器的简化形式，用于遍历集合/数组中的所有元素。

(2)语法格式
   for(元素类型 变量名 : 集合名/数组名){
       循环体;
   }  
   不断地从集合中取出一个元素并赋值给变量名，直到取完所有元素为止。 

总结：
   对于Set集合来说，遍历集合中所有元素方式有三种：toString()、迭代器、for-each结果
   对于List集合来说，遍历集合中所有元素方式除了上述三种，还有get()方法。

1.4 元素放入HashSet集合的过程(尽量理解)
   (1)使用元素调用hashCode()方法，获取该元素的哈希码值。
   (2)将哈希码值交给哈希算法，算出该元素在哈希表中的索引位置。
   (3)当该索引位置没有元素时，则将新元素直接放入即可。
   (4)当该索引位置有元素时，则使用新元素与已经存在的元素进行比较。
   (5)若新元素与已经存在的元素相等，则放弃新元素的插入，保留旧元素。
   (6)若不相等，则让新元素与后续存在元素比较，若都不相等，则放入最后。

1.5 TreeSet类
(1)什么是二叉树？
   二叉树就是指每个节点都最多只有两个子节点的树形结构。

(2)什么是有序二叉树？
   满足以下三个规则的二叉树叫做有序二叉树，又叫做二叉查找树。
       a.左子树中所有节点的元素值都小于根节点元素值。
       b.右子树中所有节点的元素值都大于根节点元素值。
       c.左子树和右子树的内部也满足上述规则。
(3)什么是平衡二叉树？
   平衡二叉树就是指左右子树高度差的绝对值不超过1的二叉树。

(4)TreeSet的使用方式
   当向TreeSet集合中放入元素时，为了保证元素的有序性不遭到破坏，必须指定元素之间比较大小的规则，指定的方式有两种：
   a.使用元素的自然排序规则，让元素的类型实现java.lang.Comparable接口并重写方法。
   b.使用比较器指定排序规则，创建Set集合时使用java.util.Comparator接口并重写方法。
  
1.6 常用的工具类
   java.util.Arrays类中提供了大量用于操作数组的工具方法。
   java.util.Collections类中提供了大量用于操作集合的工具方法。

2.Map集合(重点)
2.1 基本概念
   java.util.Map<K,V>是一个接口，支持两种泛型。
      - 其中K是Key(键)的类型，其中V是Value(值)的类型。
      - 该集合中不能包含重复的键，一个键只能对应一个值。   
   该接口的主要实现类有：HashMap类 和 TreeMap类。
   其中HashMap类的底层是采用哈希表来维护的。
   其中TreeMap类的底层是采用二叉树来维护的。     

2.2 常用的方法
   V put(K key, V value) - 用于将参数指定的key和value组成一对放入当前集合中。
        - 若key之前存在相当于修改的功能，若key之前不存在相当于增加的功能。
        - 若key之前存在则返回对应的value，否则返回null。
   V remove(Object key) - 用于根据参数指定的key来移除对应的映射关系。
        - 若key之前存在则返回对应的value，否则返回null。
   void clear() - 清空集合中的所有元素。
   boolean containsKey(Object key) - 用于判断参数指定的key是否存在。
   boolean containsValue(Object value) - 用于判断参数指定的value是否存在。
   V get(Object key) - 用于根据参数指定的key返回value，若key不存在则返回null。
   
   boolean isEmpty() - 判断是否为空。
   int size() - 获取元素的个数。
 
   Set<Map.Entry<K,V>> entrySet() - 用于获取当前集合中的Set视图。
          K getKey()  - 用于返回Map.Entry<K,V>类型元素中的key值。
          V getValue() - 用于返回Map.Entry<K,V>类型元素中的value值。
   Set<K> keySet() - 用于获取当前集合中Key的Set视图。
         
作业：
   1.复习和总结集合类的所有内容，重点掌握框架图。
   2.继续完善学生信息管理系统。 
 
 
 
  
 
 














  
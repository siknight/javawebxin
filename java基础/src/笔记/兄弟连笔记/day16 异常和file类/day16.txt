1.编程题
  自定义Student类，属性有：学号和姓名，不需要编写该类的封装，在TestStudent类中声明一个Set类型的引用指向TreeSet类，分别按照自然排序(学号)和比较器进行排序(姓名)。

作业:
-----------------------------------------------------------------------------------
今天内容：
   (1)异常
   (2)File类
   (3)I/O流

1.异常(重点)
1.1 基本概念
  异常就是不正常的意思，在java语言中主要指程序在运行阶段产生的错误。
  java.lang.Throwable类是java程序所有错误或异常的超类，主要子类有：Error和Exception
  其中Error类主要描述比较严重的错误，无法通过编程来解决的重大错误。
  其中Exception类主要描述比较轻量级的错误，可以通过编程来解决。
 
1.2 Exception类的主要分类
   RuntimeException - 运行时异常类，也叫作非检测性异常类。
       - 所谓的非检测性异常就是指在编译阶段无法被编译器检测出来的异常。
   IOException和其它异常类 - 其它异常类，也叫作检测性异常类。 

   RuntimeException类的主要子类有：
       ArithmeticException - 算数异常类
       ArrayIndexOutOfBoundsException(间接子类) - 数组下标越界异常
       NullPointerException - 空指针异常
       ClassCastException - 类型转换异常
       NumberFormatException(间接子类) - 数字格式异常

注意：
   当程序的执行过程中产生异常时，若没有手动进行处理则由java虚拟机采用默认方式处理，默认处理方式就是打印异常名称、异常原因以及异常发生的位置信息等并终止程序，后续代码无法被执行。

1.3 运行时异常的处理方式
   对于绝大多数运行时异常来说，都可以通过条件判断来避免异常的发生。   

1.4 异常的捕获
(1)语法格式
   try{
      可能产生异常对象的语句块;
   }
   catch(异常类型 引用名){
      针对当前异常类型对象的处理语句块；
   }
   ... ...
   finally{
      无论是否发生异常都应该执行的语句块;
   }

(2)注意事项
   当捕获异常的结构中有多个catch分支时，切记小范围异常类型放在大范围异常类型的上面
   懒人的写法：
       catch(Exception e){ ... ..}
   通常finally{}中编写的语句块是用于进行善后处理的代码，如：关闭文件、断开数据库等
  
(3)执行流程
   try{
      a;
      b;  可能产生异常的语句
      c;
   }catch(Exception ex){
      e;
   }
   finally{
      f;
   }
   当没有产生异常时，程序的执行流程是：a  b  c f
   当产生异常时，程序的执行流程是：a  b  e  f

1.5 异常的抛出
(1)基本概念
   在某些特殊场合中，当产生异常后却无法直接处理/不想直接处理时，此时就可以将异常转移给当前方法的调用者，这就叫异常的抛出。

(2)语法格式
   返回值类型 方法名称(形参列表) throws 异常类型{ ...  ...}
如：
   void show() throws Exception{ ... ...} 

(3)方法重写的原则
   a.要求方法名相同、参数列表相同、返回值类型也相同，从jdk1.5开始允许返回子类类型。
   b.访问权限不能变小，可以相等或者变大。
   c.不能抛出更大的异常。

注意：
   子类中重写以后的方法可以选择抛出与父类一样的异常、更小的异常、不抛出异常，但不能抛出更大的异常、不同的异常。

1.6 自定义异常
(1)自定义异常的由来
   java官方库中虽然提供了大量的异常类，但不足以描述现实生活中所有的异常情况，当出现官方库中没有描述的异常情况时就需要程序员自定义异常类加以描述，使得异常信息更具备针对性和可读性。

(2)自定义异常的流程
   a.自定义类继承Exception类或者Exception类的子类。
   b.提供两个版本的构造方法，一个是无参的构造方法，另外一个是字符串做参数的构造方法
 
(3)异常对象的抛出
   throw new 异常类型();
如：
   throw new Exception();

2.File类(重点)
2.1 基本概念
  java.io.File类用于描述文件和目录的路径等信息，可以获取文件/目录的名称等信息。  

2.2 常用的方法
  File(String pathname) - 根据参数指定的字符串路径名来构造对象。
  boolean exists() - 用于判断文件/目录是否存在。
  String getName() - 用于获取文件/目录的名称。
  long length() - 用于获取文件的大小/长度。
  long lastModified() - 用于获取文件的最后一次修改时间。
       - 返回值表示距离1970年1月1日0时0分0秒之间的毫秒数。
       - 与java.util.Date类中有参构造方法搭配使用。
  String getAbsolutePath() - 用于返回当前路径名的绝对路径信息。
       绝对路径 - 就是指以根目录开始的路径，如：C:/..  D:/..
       相对路径 - 就是指以当前工作目录开始的路径，如：./code/...
           .  表示当前目录
           .. 表示当前目录的上一级目录
       以后的开发中建议使用相对路径信息。
  boolean delete() - 用于删除文件或目录。
  boolean createNewFile() - 用于创建新的空文件。

  File[] listFiles() - 用于获取当前目录下的所有内容并返回。
  
作业：
  1.在学生信息管理系统中增加学生信息的学号异常类和年龄异常类。 
  2.自定义方法打印指定目录中的所有内容，要求子目录中的内容也要打印出来。
    参考代码：
       void printDir(File f){
           编写打印目录和文件的代码，在main()方法中调用此方法。
       }
 
 














1.编程题
  自定义Point类，属性有：横坐标和纵坐标，行为有：打印横纵坐标的方法、实现横坐标加1的方法、实现横坐标加上参数指定数值的方法、实现纵坐标减1的方法、实现纵坐标减去参数指定数值的方法，需要提供两个版本的构造。
  要求在main()方法中使用两种不同的方式来创建对象，并调用上述所有方法进行测试。

作业：

----------------------------------------------------------------------------------
今天内容：
   (1)方法的传参和递归调用
   (2)封装
   (3)static关键字
   (4)继承

1.方法的传参和递归调用
1.1 方法的传参(尽量理解)
  (1)main()方法是程序的入口，因此先分配main()方法中实参/局部变量的内存空间。
  (2)调用max()方法，为max()方法的形参变量分配内存空间。
  (3)将实参变量的数值赋值给形参变量，开始执行max()方法的方法体。
  (4)当max()方法执行完毕后，形参变量的内存空间被释放。
  (5)将max()方法的返回值赋值给main()方法中的局部变量res。
  (6)继续执行main()方法后续的代码，当main()方法结束后，释放相关的内存空间。

1.2 方法的递归调用(重点)
(1)基本概念
   递归调用就是指在方法体中调用该方法自身的形式。

案例：编程实现参数n的阶乘计算并返回。
解析：
    5! = 5 * 4 * 3 * 2 * 1;
    4! = 4 * 3 * 2 * 1; 
    3! = 3 * 2 * 1;
    ... ...

    5! = 5 * 4!;
    4! = 4 * 3!;
    ... ...
    1! = 1; 

(2)使用原则
   a.找到递归的规律，并且指定退出条件。
   b.使得问题简单化，而不是复杂化。
   c.若递归影响程序的执行效率/性能，则建议使用递推替换之。  

2.封装(重中之重 20遍)
2.1 基本概念
   当自定义类中不做任何处理时，那么在测试类中可以给成员变量赋值一些合法但不合理的数值，此时会造成与现实生活不符，为了避免成员变量值的不合理需要采用封装的技术处理。
   换句话说，封装就是一种用于保证成员变量值合理的技术。

2.2 封装的流程
  (1)私有化成员变量，使用private关键字，导致外界无法直接访问。
  (2)提供公有的get成员变量和set成员变量名的方法，在方法体中进行合理值的判断。
  (3)在构造方法中也要调用set成员变量方法进行赋值。

3.static关键字(重点)
3.1 基本概念   
   通常情况下，成员变量都隶属于对象层级，也就是每个对象都拥有
自己独立的内存空间来存放自己独有的成员变量值，当所有对象的某个成员变量值完全一样时，目前的设计会导致内存空间的浪费，为了使得该成员变量在内存空间中只要一份，并且被所有的对象共享，此时就需要使用static关键字修饰，表示静态的含义。
   当使用static修饰成员变量之后，该成员变量由隶属于对象层级提升到类层级，可以使用类名.的方式来进行访问，与对象是否创建无关。
   另外，static关键字还可以修饰成员方法。

3.2 使用方式
  (1)对于非静态的成员方法来说，既可以访问非静态的成员，也可以访问静态的成员。
       成员 = 成员变量 + 成员方法
  (2)对于静态的成员方法来说，可以访问静态的成员，但不能访问非静态的成员。
  (3)只有隶属于类层级的内容才可以使用static修饰，static关键字不能随便加。

3.3 构造块和静态语句块(熟悉)
  构造块就是指在类体中使用{}括起来的语句块。
  静态语句块就是指在类体中使用static{}括起来的语句块。

执行流程：
   静态语句块 => 构造块 => 构造方法体

练习：
   自定义Singleton类和TestSingleton类，要求实现在TestSingleton类中能得到且只能得到Singleton类中的一个对象。

3.4 单例设计模式(重中之重 20遍)
(1)基本概念
   当一个类提供一个且只提供一个对象供外界使用时，这样的类叫做单例类，而编写单例类的编程思想/套路就叫做单例设计模式。

(2)实现流程
   a.私有化构造方法，使用private关键字修饰。
   b.提供本类的引用指向本类的对象，并使用private static关键字共同修饰。
   c.提供公有的get方法负责将本类的对象返回出去。

(3)实现方式
   单例设计模式主要有两种形式：饿汉式 和 懒汉式，以后开发中推荐使用饿汉式。
   



















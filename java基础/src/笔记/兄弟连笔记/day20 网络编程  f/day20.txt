1.画图题
  画出学过的IO流之间的关系。

2.编程题
  使用两种方式创建线程，在子线程中每隔一秒打印"厉害了我的哥"，共打印10次，
  主线程等待子线程终止

作业：
---------------------------------------------------------------------------------
今天内容：
   (1)网络编程的常识
   (2)基于tcp协议的编程模型
   (3)tcp协议和udp协议的比较
   (4)基于udp协议的编程模型
   (5)反射机制

1.网络编程的常识(重点、记住)
1.1 IP地址
如：
   192.168.1.1  - 是绝大多数路由器的登录地址。  

   IP地址 - 本质上就是网络中的唯一标识，也就是说通过IP地址可以定位到具体某一台设备
   IP地址的底层是一个由32位二进制组成的整数，叫做IPv4，当然也有128位二进制组成的整数，叫做IPv6，目前主流的环境还是采用IPv4。
   日常生活中采用点分十进制表示法来进行IP地址的描述，也就是说将每一个字节的二进制转换为一个十进制整数，不同的整数之间采用小数点分隔。
如：
   0x01020304 => 1.2.3.4
   
查看IP地址的方式：
   Windows系统中查看IP地址的命令：ipconfig  或者 ipconfig/all
   Unix/Linux系统中查看IP地址的命令：ifconfig

1.2 端口号
   IP地址 - 可以定位到具体某一台设备。
   端口号 - 可以定位到设备中的具体某一个进程。
   在网络编程中需要提供：IP地址 + 端口号。

   端口号本质上就是由16位二进制组成的整数，范围是：0 ~ 65535，其中0 ~ 1024之间的端口号已经被系统占用，因此编程需要从1025开始使用。

2.基于tcp协议的编程模型(重点)
2.1 基本概念
   C/S架构 - C(Client 客户端) / S(Server 服务器)的架构。
   B/S架构 - B(Brower 浏览器) / S(Server 服务器)的架构。
   Socket - 本意为"插座"，在网络编程中主要指用于通信的逻辑载体。

2.2 编程模型
服务器：
   (1)创建ServerSocket类的对象，并提供端口号。
   (2)等待客户端的连接请求，使用accept()方法。
   (3)得到Socket类的对象，并使用输入输出流进行通信。
   (4)关闭相关的资源。    

客户端：  
   (1)创建Socket类型的对象，并指定服务器的IP地址和端口号。
   (2)使用输入输出流进行通信。
   (3)关闭相关的资源。 

2.3 相关类和方法的解析
(1)ServerSocket类
   java.net.ServerSocket类用于创建服务器套接字。
   ServerSocket(int port) - 用于创建绑定到参数指定端口号的套接字。
   Socket accept() - 用于监听并接收到服务器套接字的连接请求。
       - 若没有客户端连接则保持阻塞状态，否则返回新创建的Socket对象。
   void close() - 关闭套接字。

(2)Socket类
   java.net.Socket类用于创建客户端套接字，该套接字是两台设备之间通信的端点。
   Socket(String host, int port) - 根据参数指定的主机名/IP地址以及端口号来构造对象
   InputStream getInputStream() - 用于获取此套接字的输入流。
   OutputStream getOutputStream() - 用于获取此套接字的输出流。
   void close() - 用于关闭套接字。
 
练习：
   要求客户端发送的内容由用户手动输入，使用BufferedReader类。
   要求服务器收到客户端的消息之后，向客户端回发消息"I Recived!"
   要求服务器和客户端可以不断地进行通信,当客户端发送"bye"时结束通信。
   要求服务器能够同时支持多个客户端的连接，而且能够和多个客户端同时聊天，多线程。

3.tcp协议和udp协议的比较(笔试、记住)
3.1 tcp协议  
  tcp协议 - 传输控制协议，是一种面向连接的协议，类似于打电话。
          - 建立连接 => 进行通信  => 断开连接
          - 在通信的整个过程中全程保持连接
          - 保证数据传递的可靠性和有序性
          - 是一种全双工的字节流通信方式
          - 服务器压力比较大，资源消耗比较高，发送数据的效率相对比较低.

3.2 udp协议
   udp协议 - 用户数据报协议，是一种非面向连接的协议，类似于写信。
           - 在通信的过程中不需要保持连接
           - 不保证数据传递的可靠性和有序性
           - 是一种全双工的数据报通信方式
           - 服务器压力比较小，资源消耗低，发送数据的效率相对比较高。

4.基于udp协议的编程模型(重点)
4.1 编程模型
主机A(接收方):
   (1)创建DatagramSocket类型的对象，并提供端口号。
   (2)创建DatagramPacket类型的对象，用于接收发来的数据。
   (3)使用上述对象接收数据内容，使用recieve()方法。
   (4)关闭相关的资源。

主机B(发送方):
   (1)创建DatagramSocket类型的对象。
   (2)创建DatagramPacket类型的对象，并提供端口号和IP地址。
   (3)使用上述对象发送数据内容，使用send()方法。
   (4)关闭相关的资源。

4.2 相关类和方法的解析
(1)DatagramSocket类
   java.net.DatagramSocket类是用于创建接收和发送数据报的套接字。
   DatagramSocket() - 使用无参的形式构造对象。
   DatagramSocket(int port) - 创建套接字并绑定到参数指定的端口号上。 
   void receive(DatagramPacket p) - 用于接收数据并放到参数指定的数据报中。 
   void send(DatagramPacket p) - 用于将参数指定的数据报发送出去。
   void close() - 关闭套接字。

(2)DatagramPacket类
   java.net.DatagramPacket类用于描述数据报内容的。
   DatagramPacket(byte[] buf, int length) 
       - 构造数据报用于接收长度为length的数据放到buf数组中。
   DatagramPacket(byte[] buf, int length, InetAddress address, int port) 
       - 构造数据报用于将长度为length的数据buf发送到指定主机的指定端口。
   InetAddress getAddress() - 用于获取发送方/接收方的IP地址信息。
   int getPort() - 用于获取发送方/接收方的端口号信息。
   int getLength() - 用于获取数据报中数据的长度。

(3)InetAddress类
   java.net.InetAddress类是用于描述IP地址信息的。
   static InetAddress getLocalHost() - 用于获取当前主机的IP地址等信息。
       String getHostName()  - 获取该类对象中的主机名信息并返回。
       String getHostAddress() - 获取该类对象中的IP地址信息并返回。
   static InetAddress getByName(String host) 
       - 用于根据参数指定的主机名来获取地址信息。

作业：
   1.在udp协议的编程模型中实现接收方收到消息后向发送方回发消息"I receive!"即可。

 
 
 
 
 
 
      

  

 
 
   
   















